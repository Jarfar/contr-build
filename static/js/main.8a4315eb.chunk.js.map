{"version":3,"sources":["components/blocks/block.js","App.js","serviceWorker.js","index.js"],"names":["Block","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleScroll","e","deltaY","location","pathname","history","push","handleTouchStart","firstTouch","touches","xDown","clientX","yDown","clientY","handleTouchMove","yUp","window","addEventListener","_","throttle","leading","trailing","react_default","a","createElement","id","className","text","Component","withRouter","App","BrowserRouter","Switch","Route","exact","path","render","block","assign","Boolean","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yTAKMA,cAEF,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAWVQ,aAAe,SAACC,GACZ,GAAIA,EAAEC,OAAS,EACX,OAAQT,EAAKD,MAAMW,SAASC,UACxB,IAAK,IACD,MACJ,IAAK,KACDX,EAAKD,MAAMa,QAAQC,KAAK,KACxB,MACJ,IAAK,KACDb,EAAKD,MAAMa,QAAQC,KAAK,MACxB,MACJ,IAAK,KACDb,EAAKD,MAAMa,QAAQC,KAAK,MACxB,MACJ,QACIb,EAAKD,MAAMa,QAAQC,KAAK,KAGpC,GAAIL,EAAEC,OAAS,EACX,OAAQT,EAAKD,MAAMW,SAASC,UAC5B,IAAK,IACDX,EAAKD,MAAMa,QAAQC,KAAK,MACxB,MACJ,IAAK,KACDb,EAAKD,MAAMa,QAAQC,KAAK,MACxB,MACJ,IAAK,KACDb,EAAKD,MAAMa,QAAQC,KAAK,MACxB,MACJ,IAAK,KACD,MACJ,QACIb,EAAKD,MAAMa,QAAQC,KAAK,OA5CjBb,EAiDnBc,iBAAmB,SAACN,GAChB,IAAMO,EAAaP,EAAEQ,QAAQ,GAC7BhB,EAAKiB,MAAQF,EAAWG,QACxBlB,EAAKmB,MAAQJ,EAAWK,SApDTpB,EAuDnBqB,gBAAkB,SAACb,GACf,GAAOR,EAAKiB,OAAWjB,EAAKmB,MAA5B,CAIA,IAAIG,EAAMd,EAAEQ,QAAQ,GAAGI,QAIvB,GAFYpB,EAAKmB,MAAQG,EAEZ,EACT,OAAQtB,EAAKD,MAAMW,SAASC,UACxB,IAAK,IACDX,EAAKD,MAAMa,QAAQC,KAAK,MACxB,MACJ,IAAK,KACDb,EAAKD,MAAMa,QAAQC,KAAK,MACxB,MACJ,IAAK,KACDb,EAAKD,MAAMa,QAAQC,KAAK,MACxB,MACJ,IAAK,KACD,MACJ,QACIb,EAAKD,MAAMa,QAAQC,KAAK,UAGhC,OAAQb,EAAKD,MAAMW,SAASC,UACxB,IAAK,IACD,MACJ,IAAK,KACDX,EAAKD,MAAMa,QAAQC,KAAK,KACxB,MACJ,IAAK,KACDb,EAAKD,MAAMa,QAAQC,KAAK,MACxB,MACJ,IAAK,KACDb,EAAKD,MAAMa,QAAQC,KAAK,MACxB,MACJ,QACIb,EAAKD,MAAMa,QAAQC,KAAK,KAIpCb,EAAKmB,MAAQ,OAhGbnB,EAAKmB,MAAQ,KAFEnB,mFAMfuB,OAAOC,iBAAiB,QAASC,IAAEC,SAASvB,KAAKI,aAAc,IAAK,CAACoB,SAAS,EAAMC,UAAU,KAC9FL,OAAOC,iBAAiB,aAAcrB,KAAKW,kBAAkB,GAC7DS,OAAOC,iBAAiB,YAAarB,KAAKkB,iBAAiB,oCA+F3D,OACIQ,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAA,OAAKC,GAAG,QAAR,OAGAH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,QAAQC,UAAW9B,KAAKJ,MAAMkC,WAClCJ,EAAAC,EAAAC,cAAA,WACC5B,KAAKJ,MAAMmC,eAhHZC,aAwHLC,cAAWtC,GCpGXuC,mLAhBX,OACER,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACPJ,EAAAC,EAAAC,cAACO,EAAA,EAAD,KACUT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,KACEV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAQ,SAAC5C,GAAD,OAAW8B,EAAAC,EAAAC,cAACa,EAAD3C,OAAA4C,OAAA,GAAW9C,EAAX,CAAkBkC,UAAU,QAAQC,KAAK,YAClFL,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAOE,KAAK,KAAKC,OAAQ,SAAC5C,GAAD,OAAW8B,EAAAC,EAAAC,cAACa,EAAD3C,OAAA4C,OAAA,GAAW9C,EAAX,CAAkBkC,UAAU,SAASC,KAAK,YAC9EL,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAOE,KAAK,KAAKC,OAAQ,SAAC5C,GAAD,OAAW8B,EAAAC,EAAAC,cAACa,EAAD3C,OAAA4C,OAAA,GAAW9C,EAAX,CAAkBkC,UAAU,QAAQC,KAAK,cAC7EL,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAOE,KAAK,KAAKC,OAAQ,SAAC5C,GAAD,OAAW8B,EAAAC,EAAAC,cAACa,EAAD3C,OAAA4C,OAAA,GAAW9C,EAAX,CAAkBkC,UAAU,SAASC,KAAK,sBAVtFC,aCMEW,QACW,cAA7BvB,OAAOb,SAASqC,UAEe,UAA7BxB,OAAOb,SAASqC,UAEhBxB,OAAOb,SAASqC,SAASC,MACvB,2DCZNC,IAASN,OAAOd,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8a4315eb.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport _ from 'lodash';\n\n\nclass Block extends Component {\n\n    constructor(props) {\n        super(props);\n        this.yDown = null;\n    }\n\n    componentDidMount() {\n        window.addEventListener('wheel', _.throttle(this.handleScroll, 500, {leading: true, trailing: false}));\n        window.addEventListener('touchstart', this.handleTouchStart, false);\n        window.addEventListener('touchmove', this.handleTouchMove, false)\n\n    }\n\n    handleScroll = (e) => {\n        if (e.deltaY < 0) {     //down\n            switch (this.props.location.pathname) {\n                case '/' :\n                    break;\n                case '/2':\n                    this.props.history.push('/');\n                    break;\n                case '/3':\n                    this.props.history.push('/2');\n                    break;\n                case '/4':\n                    this.props.history.push('/3');\n                    break;\n                default:\n                    this.props.history.push('/')\n            }\n        }\n        if (e.deltaY > 0) {     //up\n            switch (this.props.location.pathname) {\n            case '/' :\n                this.props.history.push('/2');\n                break;\n            case '/2':\n                this.props.history.push('/3');\n                break;\n            case '/3':\n                this.props.history.push('/4');\n                break;\n            case '/4':\n                break;\n            default:\n                this.props.history.push('/')\n        }\n        }\n    };\n\n    handleTouchStart = (e) => {\n        const firstTouch = e.touches[0];\n        this.xDown = firstTouch.clientX;\n        this.yDown = firstTouch.clientY;\n    };\n\n    handleTouchMove = (e) => {\n        if ( ! this.xDown || ! this.yDown ) {\n            return;\n        }\n\n        let yUp = e.touches[0].clientY;\n\n        let yDiff = this.yDown - yUp;\n\n        if ( yDiff > 0 ) {      //up\n            switch (this.props.location.pathname) {\n                case '/' :\n                    this.props.history.push('/2');\n                    break;\n                case '/2':\n                    this.props.history.push('/3');\n                    break;\n                case '/3':\n                    this.props.history.push('/4');\n                    break;\n                case '/4':\n                    break;\n                default:\n                    this.props.history.push('/')\n            }\n        } else {                //down\n            switch (this.props.location.pathname) {\n                case '/' :\n                    break;\n                case '/2':\n                    this.props.history.push('/');\n                    break;\n                case '/3':\n                    this.props.history.push('/2');\n                    break;\n                case '/4':\n                    this.props.history.push('/3');\n                    break;\n                default:\n                    this.props.history.push('/')\n            }\n            }\n        /* reset values */\n        this.yDown = null;\n    };\n\n\n    render() {\n        return (\n            <main>\n                <div id=\"left\">\n                    LOL\n                </div>\n                <div id=\"right\" className={this.props.className}>\n                    <div>\n                    {this.props.text}\n                    </div>\n                </div>\n            </main>\n        );\n    }\n}\n\nexport default withRouter(Block);","import React, { Component } from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport './App.css';\nimport Block from './components/blocks/block'\n\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n              <BrowserRouter>\n                        <Switch>\n                          <Route exact path='/' render={(props) => <Block {...props} className='first' text='LOL'/>}  />\n                          <Route path='/2' render={(props) => <Block {...props} className='second' text='KEK'/>} />\n                          <Route path='/3' render={(props) => <Block {...props} className='third' text='CHEBU'/>} />\n                          <Route path='/4' render={(props) => <Block {...props} className='fourth' text='REK'/>} />\n                        </Switch>\n              </BrowserRouter>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}